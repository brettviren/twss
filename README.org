#+title: Thread (FFTW in Eigen3) With Simple Safety

* What is?

A simple thread-safe implementation of the second template parameter
of ~Eigen::FFT~

* How do?

#+begin_src c++
  #include <unsupported/Eigen/FFT>
  #include "twss.hpp"
  using MyFFT = Eigen::FFT<double, twss::fftw_impl<double> >;
  
  // thread worker function
  void my_worker(MyFFT& fft) { /* use fft with confidence */ }
#+end_src

* How does?

~twss~ simply provides a variant of ~Eigen::internal::fftw_impl<T>~ which
adds ~std::mutex~ locks around any plan construction. No big whoop.

* No way!

Yes way.  But, user beware.  This is not just extending "unsupported"
API but via a private interface.  Given there's been no movement on
~Eigen::FFT~ in like forever, and given you must have already accepted
use of "unsupported" code to care, it's probably okay to use this.

* Prove it!

#+begin_src shell :exports both :results output code :wrap "example"
  g++ -I/usr/include/eigen3 -std=c++17 -o twss-utest twss-utest.cpp
  ./twws-utest
#+end_src

#+RESULTS:
#+begin_example
#+end_example


* How good?

i7-9750H 6 cores, 12 threads @ 2.6 GHz

   | workers | loops | wall |   cpu |
   |       1 |   100 | 5.46 |  5.46 |
   |       2 |    50 | 3.00 |  5.87 |
   |       4 |    25 | 2.64 |  9.77 |
   |      10 |    10 | 2.52 | 21.55 |
   |     100 |     1 | 3.53 | 37.25 |

In all cases the two plans are made prior to entering worker threads
to execute the plan so there "should" be no contention.

This uses Debian's ~libfftw~ package version 3.3.8-2 which is compiled
with ~--enable-threads~.  Here, fftw's multi-thread functions are not
utilized.  Could they be using some internal mutex?

Let's build fftw ourselves.

#+begin_example
wget http://fftw.org/fftw-3.3.8.tar.gz
tar -xvf fftw-3.3.8.tar.gz
cd fftw-3.3.8
./configure --prefix=$HOME/opt/fftw --enable-shared  --enable-sse2
make -j (nproc)
make install
#+end_example

#+begin_example
./speed.sh
#+end_example

#+begin_src shell :exports both :results value
echo 'total workers loops plan(s) wall(s)'
cat log.1-100 log.2-50 log.4-25 log.10-10 log.100-1
#+end_src

#+RESULTS:
| total | workers | loops |   plan(s) | wall(s) |
|   100 |       1 |   100 |  0.072068 | 4.94064 |
|   100 |       2 |    50 | 0.0677574 | 2.63157 |
|   100 |       4 |    25 | 0.0709273 | 1.71094 |
|   100 |      10 |    10 | 0.0655479 | 1.62225 |
|   100 |     100 |     1 | 0.0793858 | 1.93392 |

The "plan(s)" is time in seconds to calculate the two 2D plans.
Because this test "warms" the plan cache, the ~std::mutex~ is never
encountered.  The "wall(s)" is number of seconds to execute the total
number (100) of forward and reverse transforms and excludes plan time.

Note, the 100 case pegs at 1200% CPU.

Overall, *not* having ~--enable-shared~ is faster in an absolute sense and
has better scaling with core count.  But, why is the scaling still not
linear with number of cores used?  Overhead of thread starting?

#+begin_src shell :exports both :results value
echo 'total workers loops plan(s) wall(s)'
cat log.1000-*
#+end_src

#+RESULTS:
| total | workers | loops |   plan(s) | wall(s) |
|  1000 |       1 |  1000 | 0.0692603 | 48.0394 |
|  1000 |       2 |   500 | 0.0645229 | 26.2149 |
|  1000 |       4 |   250 | 0.0678986 | 16.6922 |
|  1000 |      10 |   100 | 0.0664605 | 15.6175 |
|  1000 |     100 |    10 |  0.069378 | 16.5804 |

Pretty similar.  The 10 thread case is something like 3x too slow.

* What now?

This package is just a nugget for an FFT interface class for use in
Wire-Cell with FFTW and cuFFT and perhaps other implementations.  For
that, provide a version of Eigen::FFT with the 2D methods implemented
and ~ei_*_impl~ for each backend and IDFT implementation satisfied by
supplying the template args to that ~FFT~ class.

